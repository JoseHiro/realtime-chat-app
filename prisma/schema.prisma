// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  username String?
  password  String
  chats     Chat[]
  createdAt DateTime @default(now())

  // Stripe-related fields
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  subscriptionStatus   String?   // e.g. "trialing", "active", "canceled", "past_due"
  subscriptionPlan     String?   // e.g. "free", "trial", "pro"
  trialUsedChats   Int　@default(0)
  trialEndsAt DateTime?  // null if no trial
}

model Chat {
  id       Int      @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  title    String?
  message  Message[]
  theme    String?
  politeness String?
  level    String?
  createdAt DateTime @default(now())
  analysis   Analysis[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int
  sender    String
  message   String
  reading  String?
  createdAt DateTime @default(now())
}

model Analysis {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int
  result    Json     // ←ここに全部のJSON結果を入れる
  createdAt DateTime @default(now())
}
